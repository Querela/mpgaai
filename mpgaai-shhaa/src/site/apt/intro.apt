SHHAA - A Simple Access Control Filter  

*What is SHHAA 

  SHHAA stands for Simple HTTP Header Authentication & Authorization.
  
  It's a J2EE Web Application Servlet-Filter
  to handle login and access-control based on HTTP header attributes, 
  where those have been put there in the first place by a Shibboleth Service Provider. 
  
  Thus the filter integrates a web application with a federal authentication- & authoriztion infrastructure (AAI), 
  like the SAML based Shibboleth Framework (where a Service Provider is one part of).  


**What is a Shibboleth Service Provider (mod_shib & shibd with Apache Webserver)

  A Shibboleth Service Provider (SP) is in fact an Apache Webserver with a Shibbleth Module "mod_shib" 
  which in turn connects the Webserver with the dedicated Shibboleth Daemon "shibd" installed on this machine. 
  
  For details about Shibboleth, installation, configuration and the architecture & concepts behind 
  a Shibboleth AAI federation, please refer to the Internet2 Organisation's {{{http://shibboleth.internet2.edu/}Shibboleth Home Site}} and its {{{https://spaces.internet2.edu/display/SHIB2/Configuration}Wiki}}.
  
  The Webserver then can be configured to protect as Shibboleth Service Provider certain locations, 
  where the SP makes sure, that users have to authenticate first, and further the configured possible additional requirements 
  (based on so called (SAML) attributes) to access the targeted resource are met. If not, the SP will deny access to the requested resource. 
  
  Shibboleth is an implementation of the {{{http://saml.xml.org/saml-specifications}SAML}} protocol standard.   

  
  
*How It Works

  SHHAA Filter relies in the background on a Shibboleth Service Provider. 
  
  The Filter internally uses/is-based-on session information (for authentication) 
  and so called (user) attributes for authorization (access control decisions), 
  all found/expected as attributes in the HTTD header
  and put there in the fist place by the said Shibboleth Service Provider ('SP'). 

  That means, the web application must be under the "hood" or "awareness" of a Shibboleth Service Provider upstream.
  
  The information flow:
  
  
[./img/lazySession.small.png]
  
  For our shhaa filter the right-hand-side (j2ee web-app) of the diagram is interesting:\
  the Service Provider exports session- and user-attributes to the HTTP Header 
  where the SHHAA Filter can find and exploit this data and make them easy available to the web-app (developer) by a simple API.
  
  * on accessing a protected resource the Service Provider makes sure that the accessing user is authenticated
  
  * therefore he contacts initially the Identity Provider of the user's "home organisation"\
  (the site where the user's login-account is hosted and the user is doing his log-in)
  
  * the identiy provider handles the actual login and sends (using {{{http://saml.xml.org/saml-specifications}SAML}}, via a secure channel) the Service Provider information\
  about the login-status (socalled SAML Authentication Statement)\ 
  and some (controlable/configurable) user attributes (socalled SAML Attribute-Statement)
  
  * in a classical Shib SP setup the SP will use those attributes for this access-control decisions
  
  * the SP can be confiugred in such ways, 
  that he (the SP as front-end webserver) passes through the original request to the downstream webapplication
  without further attibute-checks (no further SP authorization)\
  but to export those attributes as Apache Webserver Environment variables or (and) into the HTTP Header (attributes)\
  {{{install.html}learn more about Shibboleth Lazy Session on the installation howto}}. 
  
  * so that any downstream web application can make use by iself from those attributes
  
  * SHHAA Filter is just a thin API to enable webapplication developers to integrate this setup easily in their application
  
   *  and have an easy and usefull API available
   
   * to extract attribute information
   
   * with the option to configure in SHHAA own, application specific access-rules for different locations,\
   just as the native Shibboleth SP, based on the (pre-fetched) attributes 
    
   * and implement their own, application specific access-control\
   (by exploiting the given attributes (via the SHHAA API)\
   and connecting those data possibly with the own application's user- and authorization system (e.g. in the webapplicions database))   
  
  
  
**SHHAA Session Awareness - the Filter's Authentication Pillar

  The Filter's session handling is fully based on Shibboleth SP session information put in the HTTP header by an upstreamed SP.\
  One could say the filter in fact does not handle authentication at all 
  but instead delegates it fully to the said Shibboleth Service Provider and its AAI Framework behind.  
  
  shhaa listens to this special SP attributes in the header and immediately recognizes if something has changed: 
  
  Changes of those attributes always indicate a change in the users (Shibboleth SSO-)login- and current-session status.
  
  Recognized attributes are 
  * a Shibboleth-SP Session-ID, 
  * the originally authenticating Identity-Provider (its socalled entity-ID) 
  * and the login-timestamp.
  
  Any change of those attribues means a changed session, even if it is the same user having "just reapeated" his login.
  
  <<Fallback to Anonymous:>>\
  If/As-long-as the shhaa filter cannot find any SP session data (e.g. due to a {{{install.html}Shibboleth Lazy Session Setup, @see installation howto}},\
  it will fall-back-to and provide an anonymous username (configurable, default "anonymous") and the usual (java) web application JSESSIOND as session identfier.  


**SHHAA Access Control - its Authorization Pillar

  shhaa filter comes with an own authorization module, too. 
  
  It works similar to the native Shibboleth SP authorization and uses the (pre-fetched) user attributes, 
  originally provided by the user's Identiy Provider, 
  as basis for its access control decisions. 
  
  The idea is to give the developers using shhaa for their webapps the option\
  to enforce their own, "local" autzorization rules, without having to configure/mess-arround-with the native Service Provider in front of the webapp.  
  
  * The access-rules can be configured (as on native Shib-SP) on a "Location" basis, 
  that means, one can have separate, different rules for any (web application) path ("URL").
  
  * The most basic rule just check for a "valid user", means the user have to have been authenticated/have a valid (SSO) login/session;
  
  * Furhter one can configure easily access rules based on the found user-attributes\
  (initially provided in the first place by the Identiy Provider the user has authenticated by).
  
  * more complex, attribute-based access-rules can be configured using logical rules tied with AND/OR/NOT
  
  * for details please refer to  {{{config.html} configuration howto}}.    


** The SHHAA Flow

  The exact behavior of shhaa filter highly depends on its configuration details (@see {{{config.html} configuration howto}}).
  
  But its important to understand for a developer using shhaa,\
  that it can do automatically re-route (forwards/redirects)
  original requests to different locations depending on the circumstances:\
  so it can re-route automatically to a (SSO) login site if needed (user not logged in yet), 
  or display an access-denied page, a logged-in information page etc...
  
  usually it acts like this: 
  
  * fallback to anonymous:\
  if no valid (SSO) session can be found,\
  shhaa will use it's fallback-user config and provide an anonymous user,\
  default user-name: "anonymous" 

  * protection: \
  shhaa displays an access-denied page\ 
  if a users accesses a protected location without prior login (SSO) or insufficient authorization (his attributes do not match the configured attribute-rules/requirements)   
  
  * auto-login:\
  if a protected location is (tried to) access,\
  shhaa will automatically redirect to the (configred) SSO login site;\
  after a successfull authentication there, the site-flow should come back to the orignal request
  
  * auto-recognition of login-status:\
  as said shhaa relies fully on the SSO login provided by the Shibboleth Service Provider an its AAI system behind;\
  therefore it needs to recognize and take over automatically external changes of the login status:
  
  * to notify users about any (possibly externally invoked) login state changes: 
  
   * shhaa displays a logged-IN info page once,\
   as soon as it recognizes a new, valid SSO login (Shib-SP session)\
  
   * shhaa displays a logged-OUT/expired page once,\
   as soon as it recognizes that the last found SSO session (from the previous request) differs from the current one
   
  both notifications are displayed (re-route/forward) only once on the request the issue has been recognized,\
  on the next request (e.g. reload) the originally requested site is provided...     
  

~~end 